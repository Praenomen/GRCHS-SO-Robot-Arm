#include <PololuMaestro.h>

MiniMaestro maestro(Serial);

const int vertUp = 2;
const int vertDown = 3;
const int baseLeft = 4;
const int baseRight = 5;
const int gripOpen = 6;
const int gripClose = 7;
const int arm1Left = 8;
const int arm1Right = 9;
const int arm2Left = 10;
const int arm2Right = 11;

//Special rules for vertical continuous rotation servo, 
//divide number by 4 and compare to 1500 as no motion
int vertVel = 6000; //Should be not moving
int basePos = 5700;
int gripPos = 4000; 
int arm1Pos = 4500;
int arm2Pos = 7700;
//once those numbers are confirmed change limits below (so we don't ram the arm into itself) ***********

int servoSpeed = 12; // Rate of position change per delay unit of most servos
int innerServoSpeed = 6; // Rate of position change per delay unit of inner arm (slower to limit wobble)
int gripSpeed = 96; // Rate of position change per delay unit of gripper open/close 

void setup()
{
  // Set the serial baud rate.
  Serial.begin(9600);
  // Initialize all the pushbutton pins as an input:
  pinMode(vertUp, INPUT);
  pinMode(vertDown, INPUT);
  pinMode(baseLeft, INPUT);
  pinMode(baseRight, INPUT);
  pinMode(gripOpen, INPUT);
  pinMode(gripClose, INPUT);
  pinMode(arm1Left, INPUT);
  pinMode(arm1Right, INPUT);
  pinMode(arm2Left, INPUT);
  pinMode(arm2Right, INPUT);

  /* setSpeed takes channel number you want to limit and the
    speed limit in units of (1/4 microseconds)/(10 milliseconds).
    A speed of 0 makes the speed unlimited, so that setting the
    target will immediately affect the position. Note that the
    actual speed at which your servo moves is also limited by the
    design of the servo itself, the supply voltage, and mechanical
    loads. */

  /* setAcceleration takes channel number you want to limit and
    the acceleration limit value from 0 to 255 in units of (1/4
    microseconds)/(10 milliseconds) / (80 milliseconds).
    A value of 0 corresponds to no acceleration limit. An
    acceleration limit causes the speed of a servo to slowly ramp
    up until it reaches the maximum speed, then to ramp down again
    as the position approaches the target, resulting in relatively
    smooth motion from one point to another. */
  for (int i = 0; i < 5; i++)
  {
    maestro.setAcceleration(i, 0); //No accel rules
    maestro.setSpeed(i, 100); // Speed limited at 100 (ask about why this matters)
  }
  // Use acceleration for vertical servo (small corrections easier)
  // Probably won't work because it wouldn't stop when you let go.
  // maestro.setAcceleration(0, 20);
  
  // Set the target of each channel to 1500 us, and wait 2 seconds.
  maestro.setTarget(0, vertVel);
  maestro.setTarget(1, basePos);
  maestro.setTarget(2, gripPos);
  maestro.setTarget(3, arm1Pos);
  maestro.setTarget(4, arm2Pos);
  delay(2000);
}

void loop()
{
  delay(10); // Time for the movement to occur
  
  // read the state of the pushbutton value:
  // check if the pushbutton is pressed.
  // if it is, the button state is HIGH:

  // Vertical continuous servo
  if (digitalRead(vertDown) == HIGH)
  {
    vertVel = 8000;
  }
  else if (digitalRead(vertUp) == HIGH)
  {
    vertVel = 4000;
  }
  else vertVel = 6000;

  // Base servo motor
  if (digitalRead(baseLeft) == HIGH)
  {
    basePos += innerServoSpeed;
    if (basePos > 8000) basePos = 8000;
  }
  if (digitalRead(baseRight) == HIGH)
  {
    basePos -= innerServoSpeed;
    if (basePos < 4000) basePos = 4000;
  }

  // Middle arm servo
  if (digitalRead(arm1Left) == HIGH)
  {
    arm1Pos += servoSpeed;
    if (arm1Pos > 8000) arm1Pos = 8000;
  }
  if (digitalRead(arm1Right) == HIGH)
  {
    arm1Pos -= servoSpeed;
    if (arm1Pos < 4500) arm1Pos = 4500;
  }

  // Outer arm servo
  if (digitalRead(arm2Left) == HIGH)
  {
    arm2Pos += servoSpeed;
    if (arm2Pos > 7700) arm2Pos = 7700;
  }
  if (digitalRead(arm2Right) == HIGH)
  {
    arm2Pos -= servoSpeed;
    if (arm2Pos < 4000) arm2Pos = 4000;
  }

  // Gripper Servo
  if (digitalRead(gripOpen) == HIGH)
  {
    gripPos += gripSpeed;
    if (gripPos > 8000) gripPos = 8000;
  }
  if (digitalRead(gripClose) == HIGH)
  {
    gripPos -= gripSpeed;
    if (gripPos < 4000) gripPos = 4000;
  }

  // Set the velocity of channel 0 to vertVel
  maestro.setTarget(0, vertVel);
  // Only run if we want it to
  if (digitalRead(baseLeft) == HIGH or digitalRead(baseRight) == HIGH)
  {
    maestro.setTarget(1, basePos);
  }
  if (digitalRead(gripOpen) == HIGH or digitalRead(gripClose) == HIGH)
  {
    maestro.setTarget(2, gripPos);
  }
  maestro.setTarget(3, arm1Pos);
  maestro.setTarget(4, arm2Pos);
}
