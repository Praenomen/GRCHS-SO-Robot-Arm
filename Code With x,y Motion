// Includes the controller's library
#include <PololuMaestro.h>

// Names serial output
MiniMaestro maestro(Serial);

// I don't actually know why these are here, 
// but they were important before so I put them in again
const int vertUp = 2;
const int vertDown = 3;
const int gripOpen = 4;
const int gripClose = 5;
const int left = 6;
const int right = 7;
const int up = 8;
const int down = 9;

// Coordinate class, runs only x and y for now
class xy
{
  // Temporary, some of this can probably be private
  public:
    float x, y;
    xy() {
    }
    xy(float _x, float _y)
    {
      x = _x;
      y = _y;
    }
};

// Arm class, should only hold 2 for the time being
class ArmSegment
{
  // Again, temporarily all public
  public:
    xy armBase, end;

    float len, angleToOrigin, angleToBase;

    // Constructor
    
    ArmSegment(xy _base, float _len, float _angleToOrigin)
    {
      xy armBase = xy();
      armBase = _base;
      len = _len;
      angleToOrigin = _angleToOrigin;
      xy end = xy();
      end.x = armBase.x + len * cos(angleToOrigin);
      end.y = armBase.y + len * sin(angleToOrigin);
    }

    // Methods
    
    void update()
    {
      end.x = armBase.x + len * cos(angleToOrigin);
      end.y = armBase.y + len * sin(angleToOrigin);
    }
};

// Homemade distance formula function
// returns distance between 2 x,y points
// for a and c as x values, b and d as y values
int dist(float a, float b, float c, float d) {
  int delta;
  delta = sqrt(sq(c - a) + sq(d - b));
  return delta;
}

xy segmentTarget;
xy robotBase;

xy calculateBaseArmEndTarget(ArmSegment _baseArm, xy _target, float _endArmLength)
{
  float x1 = 0;
  float y1 = 0;
  float x2 = 0;
  float y2 = 0;
  boolean switchXandY = false;
  float A = _baseArm.armBase.x; // x of base arm
  float B = _baseArm.armBase.y; // y of base arm
  float C = _target.x; // target x
  float D = _target.y; // target y
  float L1 = _baseArm.len;
  float L2 = _endArmLength;
  if (abs((D - B)) < 1) switchXandY = true;
  if (switchXandY)
  {
    A = _baseArm.armBase.y;
    B = _baseArm.armBase.x;
    C = _target.y;
    D = _target.x;
    L1 = _endArmLength;
    L2 = _baseArm.len;
  }
  
  float H = (A - C) / (D - B);
  float I = (sq(C) + sq(B) - 2 * B * D + sq(D) - sq(A) + sq(L1) - sq(L2)) / (2 * D - 2 * B);

  float a = sq(H) + 1;
  float b = 2 * H * I - 2 * A;
  float c = sq(I) + sq(A) - sq(L1);

  if (switchXandY)
  {
    y1 = (-b - sqrt(sq(b) - 4 * a * c)) / (2 * a);
    x1 = B + sqrt(sq(L1) - sq(y1 - A));
    if (abs(dist(x1, y1, _target.x, _target.y) - _baseArm.len) > .1) x1 = B - sqrt(sq(L1) - sq(y1 - A));

    y2 = (-b + sqrt(sq(b) - 4 * a * c)) / (2 * a);
    x2 = B + sqrt(sq(L1) - sq(y2 - A));
    if (abs(dist(x2, y2, _target.x, _target.y) - _baseArm.len) > .1) x2 = B - sqrt(sq(L1) - sq(y2 - A));
  } 
  else
  {
    x1 = (-b + sqrt(sq(b) - 4 * a * c)) / (2 * a);
    y1 = B + sqrt(sq(L1) - sq(x1 - A));
    if (abs(dist(x1, y1, _target.x, _target.y) - _endArmLength) > .1) y1 = B - sqrt(sq(L1) - sq(x1 - A));
    x2 = (-b - sqrt(sq(b) - 4 * a * c)) / (2 * a);
    y2 = B + sqrt(sq(L1) - sq(x2 - A));
    if (abs(dist(x2, y2, _target.x, _target.y) - _endArmLength) > .1) y2 = B - sqrt(sq(L1) - sq(x2 - A));
  }
}

// Class for the arm as a whole, including all segments
class RobotArm
{
  // Once more, temporary
  public:
    float lengthOfArmSegment[];
    ArmSegment segments[];
    xy robotBase;
    
    // Constructor
    
    RobotArm(float _lengths[2], xy _base)
    {
      float lengthOfArmSegment[2];
      for (int i = 0; i < 2; i++) {
        lengthOfArmSegment[i] = _lengths[i];
      }
      xy base = xy();
      robotBase = _base;
      //segments = new ArmSegment[2];
      //segments[0] = new ArmSegment(robotBase, lengthOfArmSegment[0], 0);
      //segments[1] = new ArmSegment(segments[0].end, lengthOfArmSegment[1], 0);
      segments[0].angleToBase = segments[0].angleToOrigin;
      segments[1].angleToBase = segments[1].angleToOrigin - segments[0].angleToBase + PI / 2;
    }

    //Methods
    
    int maxLength()
    {
      int maxLength = 0;
      for (int i = 0; i < 2; i++) maxLength += lengthOfArmSegment[i];
      
      return maxLength;
    }

    // Where the magic happens
    void update(xy _target)
    {
      xy segmentTarget = xy();  //Target xy for segment so remaining segments can reach
      segmentTarget = calculateBaseArmEndTarget(segments[0], _target, segments[1].len);

      if (segmentTarget.x > 0) segments[0].angleToOrigin = asin((segmentTarget.y - segments[0].armBase.y) / segments[0].len);
      else segments[0].angleToOrigin = PI - asin((segmentTarget.y - segments[0].armBase.y) / segments[0].len);
      segments[0].update();
      segments[1].armBase = segments[0].end;
      if (_target.x - segments[1].armBase.x > 0) segments[1].angleToOrigin = asin((_target.y - segments[1].armBase.y) / segments[1].len);
      else segments[1].angleToOrigin = PI - asin((_target.y - segments[1].armBase.y) / segments[1].len);
      segments[1].update();

      segments[0].angleToBase = segments[0].angleToOrigin;
      segments[1].angleToBase = segments[1].angleToOrigin - segments[0].angleToBase + PI / 2;

      // The problematic if statement
      /*if (dist(_baseArm.end.x, _baseArm.end.y, x1, y1) < dist(_baseArm.end.x, _baseArm.end.y, x2, y2))
        return xy(x1, y1);
      else
        return xy(x2, y2);*/
    }
};

float armLengths[] = {30,30};

RobotArm robot(armLengths, robotBase);

xy globalTarget(robot.maxLength(), robotBase.y);

// Servo positions when power first initializes:
int vertVel = 6000;
int gripPos = 4000;
// MORE FOR OTHER SERVOS - EXPERIMENT'

// Rate of position change per delay unit of most servos
int servoSpeed = 12;
// Rate of position change per delay unit of gripper open/close
int gripSpeed = 96; 

void setup()
{
  Serial.begin(9600);
  
  pinMode(vertUp, INPUT);
  pinMode(vertDown, INPUT);
  pinMode(gripOpen, INPUT);
  pinMode(gripClose, INPUT);
  pinMode(right, INPUT);
  pinMode(left, INPUT);
  pinMode(up, INPUT);
  pinMode(down, INPUT);

  for (int i = 0; i < 4; i++)
  {
    // No limits on acceleration
    maestro.setAcceleration(i, 0); 
    // Speed limited at 100 (ask about why this matters)
    maestro.setSpeed(i, 100); 
  }

  // Set the target of each channel to its starting position (collapsed), and wait 2 seconds.
  // ADD MORE setTargets WHEN POSSIBLE
  maestro.setTarget(0, vertVel);
  maestro.setTarget(2, gripPos);
  delay(2000);
};

void loop()
{
  // Allow movement time
  delay(10);
  
  // read the state of the pushbutton value:
  // check if the pushbutton is pressed.
  // if it is, the button state is HIGH:

  // Vertical continuous servo
  if (digitalRead(vertDown) == HIGH)
  {
    vertVel = 8000;
  }
  else if (digitalRead(vertUp) == HIGH)
  {
    vertVel = 4000;
  }
  else
  {
    vertVel = 6000;
  }

  // Gripper Servo
  if (digitalRead(gripOpen) == HIGH)
  {
    gripPos += gripSpeed;
  }
  if (digitalRead(gripClose) == HIGH)
  {
    gripPos -= gripSpeed;
  }
  if (gripPos > 8000) gripPos = 8000;
  if (gripPos < 4000) gripPos = 4000;
  
  if (digitalRead(right) == HIGH)
  {
    if (dist(robot.robotBase.x, robot.robotBase.y, globalTarget.x + 1, globalTarget.y) < robot.maxLength()) 
    {
      globalTarget.x++;
    }
  }
  if (digitalRead(left) == HIGH)
  {
    if (dist(robot.robotBase.x, robot.robotBase.y, globalTarget.x - 1, globalTarget.y) < robot.maxLength()) 
    {
      globalTarget.x--;
    }
  }
  if (digitalRead(up) == HIGH)
  {
    if (dist(robot.robotBase.x, robot.robotBase.y, globalTarget.x, globalTarget.y + 1) < robot.maxLength())
    {
      globalTarget.y++;
    }
  }
  if (digitalRead(down) == HIGH)
  {
    if (dist(robot.robotBase.x, robot.robotBase.y, globalTarget.x, globalTarget.y - 1) < robot.maxLength()) 
    {
      globalTarget.y--;
    }
  }

  //SET ALL TARGETS HERE (INCL VERT AND GRIP)
  
  // Update Robot Arm Position
  robot.update(globalTarget);
}
}
